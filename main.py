import telebot
import sqlite3
from telebot import types
from datetime import date
from string import punctuation

from telebot.types import InputMediaPhoto

bot = telebot.TeleBot('6457181720:AAH2eDiXF70Z7RvdkDkndmgEaDEb2Aeoovs')
product = []

message_order_list = ['–¢–∏–ø –¥–æ—Å—Ç–∞–≤–∫–∏: ', '–ò–º—è –§–∞–º–∏–ª–∏—è: ', '–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: ', '–ì–æ—Ä–æ–¥ –ø—Ä–æ–∂–∏–≤–∞–Ω–∏—è: ', '–û—Ç–¥–µ–ª–µ–Ω–∏–µ '
                                                                                                   '–µ–≤—Ä–æ–ø–æ—á—Ç—ã/–∞–¥—Ä–µ—Å '
                                                                                                   '–ø—Ä–æ–∂–∏–≤–∞–Ω–∏—è:',
                      '–¢–æ–≤–∞—Ä: ', '–ò—Ç–æ–≥–æ–≤–∞—è —Ü–µ–Ω–∞: ', '–ù–∏–∫ –∑–∞–∫–∞–∑—á–∏–∫–∞ @']

states = {
    'start': 0,
    'watch_selected': 1,
    'earphones_selected': 2,
    'attachment_selected': 3,
    'watch_model_selected': 4,
    'earphones_model_selected': 5,
    'attachment_model_selected': 6,
    'order': 7,
    'sending_order': 8,
    'chose_sell': 9,
    'show_sell_model': 10,
    'full_sell_model_info': 11,
}

sell_offers = {
    '1': ["Air pods pro2(—Å —à—É–º–∫–æ–π) + –ß–∞—Å—ã HK9PRO(watch8 45mm)", 250, 'watch', 'earphones'],
    '2': ['Air pods pro2(—Å —à—É–º–∫–æ–π) + –ß–∞—Å—ã HK8PRO MAX(watch ultra 49mm)', 260, 'watch', 'earphones'],
    '3': ['Air pods 3 + –ß–∞—Å—ã HK9PRO(watch8 45mm)', 230, 'watch', 'earphones'],
    '4': ['Air pods 3 + –ß–∞—Å—ã HK8PRO MAX(watch ultra 49mm)', 240, 'watch', 'earphones'],
    '5': ['–ß–∞—Å—ã HK9PRO(watch8 45mm) + –ß–∞—Å—ã HK8PRO MAX(watch ultra 49mm)', 280, 'earphones', 'earphones']
}

punctuation += '‚Ññ'

add_model = False

user_state = {}

orders = {}

selected_models = {}

alphabet = '–∞–±–≤–≥–¥–µ–∂–∑–∏–π–∫–ª–º–Ω–æ–ø—Ä—Å—Ç—É—Ñ—Ö—Ü—á—à—â—ä—ã—å—ç—é—è'

def hello_command(name):
    return f'–ü—Ä–∏–≤–µ—Ç {name}, —è –±–æ—Ç –º–∞–≥–∞–∑–∏–Ω–∞ airzone –∏ —è –ø–æ–º–æ–≥—É —Ç–µ–±–µ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å—Å—è —Å –≤—ã–±–æ—Ä–æ–º –∏ —Å–¥–µ–ª–∞—Ç—å –∑–∞–∫–∞–∑. –ö–∞–∫–æ–π –∏–∑ ' \
           f'–≤–∏–¥–æ–≤ ' \
           f'—Ç–æ–≤–∞—Ä–∞ —Ç–µ–±—è –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç?'

def zapros(table_name: str, first_str: str, second_str: str) -> tuple:
    profuct_dict = {}
    conn = sqlite3.connect('database.db')
    cursor = conn.cursor()
    cursor.execute(f'SELECT * FROM {table_name} WHERE quantity > 0')
    data = cursor.fetchall()
    info = ''
    count = 1
    info += first_str
    for i in data:
        profuct_dict[count] = i[0]
        if i[1] not in product:
            product.append(i[1])
        info += f'{i[0]}.{i[1]}\n‚úÖ{i[3]} —Ä—É–±–ª–µ–π‚ùå–≤–º–µ—Å—Ç–æ {i[5]}\n\n'
        count += 1
    info += second_str
    cursor.close()
    conn.close()
    return (info, profuct_dict)

def get_model(table_name: str, model_name: int, products: dict) -> tuple:
    conn = sqlite3.connect('database.db')
    cursor = conn.cursor()
    cursor.execute(f'SELECT * FROM {table_name} WHERE quantity > 0 and id =\'{products[model_name]}\'')
    data = cursor.fetchall()
    info = ''
    for i in data:
        info += f'{i[1]}\n{i[2]}\n\n‚úÖ{i[3]} —Ä—É–±–ª–µ–π‚ùå–≤–º–µ—Å—Ç–æ {i[5]}\n\n'
    cursor.close()
    conn.close()
    return info, data

def get_sale_model(table_name: str, model_name: str):
    conn = sqlite3.connect('database.db')
    cursor = conn.cursor()
    cursor.execute(f'SELECT * FROM {table_name} WHERE quantity > 0 and name =\'{model_name}\'')
    data = cursor.fetchall()
    info = ''
    for i in data:
        info += f'{i[1]}\n{i[2]}\n\n‚úÖ{i[3]} —Ä—É–±–ª–µ–π‚ùå–≤–º–µ—Å—Ç–æ {i[5]}\n\n'
    cursor.close()
    conn.close()
    return info, data[0][-1]

def add_order(text: list, models: str, price: int):
    try:
        conn = sqlite3.connect('database.db')
        cursor = conn.cursor()
        name = text[1].split(' ')[0]
        surname = text[1].split(' ')[1]
        number = text[2]
        time = date.today()
        final = []
        for i in text:
            final.append(i)
        final.append(models)
        final.append(price)
        cursor.execute(f'insert into orders(type_of_delivery, name, surname, phone_number, city, adress, models, price, '
                    f'date_time'
                    f') values ('
                    f'\'{text[0]}\', '
                    f'\'{name}\', \'{surname}\', \'{number}\', \'{text[3]}\', \'{text[4]}\', \'{models}\', {price}, '
                    f'\'{time}\')')
        conn.commit()
        cursor.close()
        conn.close()
        return final
    except Exception as ex:
        print(ex)

def get_sell():
    info = ''
    for key, value in sell_offers.items():
        info += f'{key}. {value[0]} - {value[1]} —Ä—É–±–ª–µ–π\n'
    return info

@bot.message_handler(commands=['start'])
def hello(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    watch = types.KeyboardButton('–ß–∞—Å—ã‚åöÔ∏è')
    earphones = types.KeyboardButton('–ù–∞—É—à–Ω–∏–∫–∏üéß')
    attachment = types.KeyboardButton('–ê–∫—Å–µ—Å—Å—É–∞—Ä—ãüîã')
    markup.add(watch, earphones, attachment)
    name = message.from_user.first_name
    bot.send_message(message.chat.id, f'–ü—Ä–∏–≤–µ—Ç {name}, —è –±–æ—Ç –º–∞–≥–∞–∑–∏–Ω–∞ airzone –∏ —è –ø–æ–º–æ–≥—É —Ç–µ–±–µ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å—Å—è —Å '
                                      f'–≤—ã–±–æ—Ä–æ–º –∏ '
                                      f'—Å–¥–µ–ª–∞—Ç—å –∑–∞–∫–∞–∑. –ö–∞–∫–æ–π –∏–∑ –≤–∏–¥–æ–≤ —Ç–æ–≤–∞—Ä–∞ —Ç–µ–±—è –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç?', reply_markup=markup)
    user_state[message.chat.id] = states['start']

@bot.message_handler(content_types=['text'])
def start_reply(message):
    chat_id = message.chat.id
    try:
        if user_state[chat_id] == states['start']:
            if message.text == '–ß–∞—Å—ã‚åöÔ∏è':
                markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
                back = types.KeyboardButton('–ù–∞–∑–∞–¥üîô')
                markup.add(back)
                bot.send_message(chat_id, zapros('earphones', '–û—Ç–ª–∏—á–Ω–æ!\n–í–æ—Ç —Å–ø–∏—Å–æ–∫ –∏–º–µ—é—â–∏—Ö—Å—è –≤ –Ω–∞–ª–∏—á–∏–∏ —á–∞—Å–æ–≤:\n\n',
                                                 '–í –∫–æ–º–ø–ª–µ–∫—Ç–µ —Å —á–∞—Å–∞–º–∏: \n‚Ä¢ –ë–µ—Å–ø—Ä–æ–≤–æ–¥–Ω–∞—è –∑–∞—Ä—è–¥–∫–∞\n‚Ä¢ –°–∏–ª–∏–∫–æ–Ω–æ–≤—ã–π —Ä–µ–º–µ—à–æ–∫ –≤ —Ü–≤–µ—Ç –∫–æ—Ä–ø—É—Å–∞ —á–∞—Å–æ–≤, –∫–∞–∫ –Ω–∞ —Ñ–æ—Ç–æ\n–ó–∞–∏–Ω—Ç–µ—Ä–µ—Å–æ–≤–∞–ª–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–∞—è –º–æ–¥–µ–ª—å? –£–∫–∞–∂–∏ –µ–µ –Ω–æ–º–µ—Ä')[0], reply_markup=markup)
                user_state[chat_id] = states['watch_selected']
            elif message.text == '–ù–∞—É—à–Ω–∏–∫–∏üéß':
                markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
                back = types.KeyboardButton('–ù–∞–∑–∞–¥üîô')
                markup.add(back)
                bot.send_message(chat_id, zapros('watch', '–û—Ç–ª–∏—á–Ω–æ!\n–í–æ—Ç —Å–ø–∏—Å–æ–∫ –∏–º–µ—é—â–∏—Ö—Å—è –≤ –Ω–∞–ª–∏—á–∏–∏ –Ω–∞—É—à–Ω–∏–∫–æ–≤:\n\n',
                                                 '–ö –Ω–∞—É—à–Ω–∏–∫–∞–º –¥–∞—Ä–∏–º –∑–∞—â–∏—Ç–Ω—ã–π —á–µ—Ö–æ–ª!üéÅ\n–ó–∞–∏–Ω—Ç–µ—Ä–µ—Å–æ–≤–∞–ª–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–∞—è –º–æ–¥–µ–ª—å? –£–∫–∞–∂–∏ –µ–µ –Ω–æ–º–µ—Ä')[0], reply_markup=markup)
                user_state[chat_id] = states['earphones_selected']
            elif message.text == '–ê–∫—Å–µ—Å—Å—É–∞—Ä—ãüîã':
                markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
                back = types.KeyboardButton('–ù–∞–∑–∞–¥üîô')
                markup.add(back)
                bot.send_message(chat_id, zapros('attachment', '–û—Ç–ª–∏—á–Ω–æ!\n–í–æ—Ç —Å–ø–∏—Å–æ–∫ –∏–º–µ—é—â–∏—Ö—Å—è –≤ –Ω–∞–ª–∏—á–∏–∏ '
                                                               '–∞–∫—Å–µ—Å—Å—É–∞—Ä–æ–≤:\n\n', '–ó–∞–∏–Ω—Ç–µ—Ä–µ—Å–æ–≤–∞–ª–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–∞—è –º–æ–¥–µ–ª—å? '
                                                                                   '–£–∫–∞–∂–∏ –µ–µ –Ω–æ–º–µ—Ä')[0],
                                 reply_markup=markup)
                user_state[chat_id] = states['attachment_selected']
            elif message.text == '–ù–∞—á–∞—Ç—å —Å –Ω–∞—á–∞–ª–∞':
                markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
                watch = types.KeyboardButton('–ß–∞—Å—ã‚åöÔ∏è')
                earphones = types.KeyboardButton('–ù–∞—É—à–Ω–∏–∫–∏üéß')
                attachment = types.KeyboardButton('–ê–∫—Å–µ—Å—Å—É–∞—Ä—ãüîã')
                markup.add(watch, earphones, attachment)
                name = message.from_user.first_name
                bot.send_message(message.chat.id,
                                 f'–ü—Ä–∏–≤–µ—Ç {name}, —è –±–æ—Ç –º–∞–≥–∞–∑–∏–Ω–∞ airzone –∏ —è –ø–æ–º–æ–≥—É —Ç–µ–±–µ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å—Å—è —Å '
                                 f'–≤—ã–±–æ—Ä–æ–º –∏ '
                                 f'—Å–¥–µ–ª–∞—Ç—å –∑–∞–∫–∞–∑. –ö–∞–∫–æ–π –∏–∑ –≤–∏–¥–æ–≤ —Ç–æ–≤–∞—Ä–∞ —Ç–µ–±—è –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç?', reply_markup=markup)


        elif (user_state[chat_id] == states['watch_selected'] or user_state[chat_id] == states['earphones_selected'] or user_state[chat_id]\
                == states['attachment_selected']) and message.text == '–ù–∞–∑–∞–¥üîô':
            markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
            watch = types.KeyboardButton('–ß–∞—Å—ã‚åöÔ∏è')
            earphones = types.KeyboardButton('–ù–∞—É—à–Ω–∏–∫–∏üéß')
            attachment = types.KeyboardButton('–ê–∫—Å–µ—Å—Å—É–∞—Ä—ãüîã')
            markup.add(watch, earphones, attachment)
            bot.send_message(chat_id, hello_command(message.from_user.first_name), reply_markup=markup)
            user_state[message.chat.id] = states['start']


#
#          –ß–ê–°–´ !!!
#


        elif user_state[chat_id] == states['watch_selected']:
            my_tuple = zapros('earphones', '–û—Ç–ª–∏—á–Ω–æ!\n–í–æ—Ç —Å–ø–∏—Å–æ–∫ –∏–º–µ—é—â–∏—Ö—Å—è –≤ –Ω–∞–ª–∏—á–∏–∏ —á–∞—Å–æ–≤:\n\n',
                                                 '–í –∫–æ–º–ø–ª–µ–∫—Ç–µ —Å —á–∞—Å–∞–º–∏: \n‚Ä¢ –ë–µ—Å–ø—Ä–æ–≤–æ–¥–Ω–∞—è –∑–∞—Ä—è–¥–∫–∞\n‚Ä¢ –°–∏–ª–∏–∫–æ–Ω–æ–≤—ã–π —Ä–µ–º–µ—à–æ–∫ –≤ —Ü–≤–µ—Ç –∫–æ—Ä–ø—É—Å–∞ —á–∞—Å–æ–≤, –∫–∞–∫ –Ω–∞ —Ñ–æ—Ç–æ\n–ó–∞–∏–Ω—Ç–µ—Ä–µ—Å–æ–≤–∞–ª–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–∞—è –º–æ–¥–µ–ª—å? –£–∫–∞–∂–∏ –µ–µ –Ω–æ–º–µ—Ä')
            try:
                markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
                back = types.KeyboardButton('–ù–∞–∑–∞–¥ –∫ —á–∞—Å–∞–ºüîô')
                order = types.KeyboardButton('–ó–∞–∫–∞–∑–∞—Ç—åüòä')
                markup.add(back, order)
                model = get_model('earphones', int(message.text), my_tuple[1])
                photos = model[1][0][-1].split(' ')
                photo1 = photos[0]
                photo2 = photos[1]
                media = [InputMediaPhoto(open(f'./{photo1}', 'rb'), caption=f'{model[0]}'),
                         InputMediaPhoto(open(f'./{photo2}', 'rb'))]
                bot.send_media_group(chat_id, media)
                bot.send_message(chat_id, text='–ó–∞–∏–Ω—Ç–µ—Ä–µ—Å–æ–≤–∞–ª–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ? –ñ–º–∏ "–∑–∞–∫–∞–∑–∞—Ç—å"üëáüèª', reply_markup=markup,
                                 disable_notification=True)
                user_state[chat_id] = states['watch_model_selected']
                selected_models[chat_id] = {model[1][0][1]: model[1][0]}
            except Exception as ex:
                bot.send_message(chat_id, "–ü–æ—Ö–æ–∂–µ –≤—ã –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ –≤–≤–µ–ª–∏ –Ω–æ–º–µ—Ä –º–æ–¥–µ–ª–∏, —Ç—Ä–µ–±—É–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ")
                print(ex)


        elif user_state[chat_id] == states['watch_model_selected']:
            if message.text == '–ù–∞–∑–∞–¥ –∫ —á–∞—Å–∞–ºüîô':
                my_tuple = zapros('earphones', '–û—Ç–ª–∏—á–Ω–æ!\n–í–æ—Ç —Å–ø–∏—Å–æ–∫ –∏–º–µ—é—â–∏—Ö—Å—è –≤ –Ω–∞–ª–∏—á–∏–∏ —á–∞—Å–æ–≤:\n\n',
                                  '–í –∫–æ–º–ø–ª–µ–∫—Ç–µ —Å —á–∞—Å–∞–º–∏: \n‚Ä¢ –ë–µ—Å–ø—Ä–æ–≤–æ–¥–Ω–∞—è –∑–∞—Ä—è–¥–∫–∞\n‚Ä¢ –°–∏–ª–∏–∫–æ–Ω–æ–≤—ã–π —Ä–µ–º–µ—à–æ–∫ –≤ —Ü–≤–µ—Ç –∫–æ—Ä–ø—É—Å–∞ —á–∞—Å–æ–≤, –∫–∞–∫ –Ω–∞ —Ñ–æ—Ç–æ\n–ó–∞–∏–Ω—Ç–µ—Ä–µ—Å–æ–≤–∞–ª–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–∞—è –º–æ–¥–µ–ª—å? –£–∫–∞–∂–∏ –µ–µ –Ω–æ–º–µ—Ä')
                markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
                back = types.KeyboardButton('–ù–∞–∑–∞–¥üîô')
                markup.add(back)
                bot.send_message(chat_id, my_tuple[0], reply_markup=markup)
                user_state[chat_id] = states['watch_selected']
                if not add_model:
                    del selected_models[chat_id]
            elif message.text == '–ó–∞–∫–∞–∑–∞—Ç—åüòä':
                markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
                still_order = types.KeyboardButton('–û—Å—Ç–∞–≤–∏—Ç—å –≤—ã–±—Ä–∞–Ω–Ω–æ–µ')
                sale = types.KeyboardButton('–ê–∫—Ü–∏—è')
                markup.add(sale, still_order)
                bot.send_message(chat_id, '–¢–∞–∫–∂–µ –º—ã –ø–æ–¥–≥–æ—Ç–æ–≤–∏–ª–∏ 2 –°–ü–ï–¶–ü–†–ï–î–õ–û–ñ–ï–ù–ò–Ø –Ω–∞ –∫–æ–º–ø–ª–µ–∫—Ç—ã 1+1 üî•\n\n1Ô∏è‚É£–ß–∞—Å—ã + '
                                          '–Ω–∞—É—à–Ω–∏–∫–∏ –±—É–¥—É—Ç –ø–æ –°–ü–ï–¶–ò–ê–õ–¨–ù–û–ô —Ü–µ–Ω–µ Air pods pro2(—Å —à—É–º–∫–æ–π) + –ß–∞—Å—ã HK9PRO('
                                          'watch8 45mm) - 250 —Ä—É–±–ª–µ–π\n Air pods pro2(—Å —à—É–º–∫–æ–π) + –ß–∞—Å—ã HK8PRO MAX(watch '
                                          'ultra 49mm) - 260 —Ä—É–±–ª–µ–π\n Air pods 3 + –ß–∞—Å—ã HK9PRO(watch8 45mm) - 230 '
                                          '—Ä—É–±–ª–µ–π\n Air pods 3 + –ß–∞—Å—ã HK8PRO MAX(watch ultra 49mm) - 240 —Ä—É–±–ª–µ–π\n\n '
                                          '2Ô∏è‚É£–ß–∞—Å—ã + —á–∞—Å—ã –ø–æ –°–ü–ï–¶–ò–ê–õ–¨–ù–û–ô —Ü–µ–Ω–µ\n HK9PRO(watch8 45mm) + –ß–∞—Å—ã HK8PRO MAX('
                                          'watch ultra 49mm)- 280 —Ä—É–±–ª–µ–π', reply_markup=markup)
                user_state[chat_id] = states['order']



#
#          –ù–ê–£–®–ù–ò–ö–ò !!!
#


        elif user_state[chat_id] == states['earphones_selected']:
            my_tuple = zapros('watch', '–û—Ç–ª–∏—á–Ω–æ!\n–í–æ—Ç —Å–ø–∏—Å–æ–∫ –∏–º–µ—é—â–∏—Ö—Å—è –≤ –Ω–∞–ª–∏—á–∏–∏ –Ω–∞—É—à–Ω–∏–∫–æ–≤:\n\n',
                                                 '–ö –Ω–∞—É—à–Ω–∏–∫–∞–º –¥–∞—Ä–∏–º –∑–∞—â–∏—Ç–Ω—ã–π —á–µ—Ö–æ–ª!üéÅ\n–ó–∞–∏–Ω—Ç–µ—Ä–µ—Å–æ–≤–∞–ª–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–∞—è –º–æ–¥–µ–ª—å? –£–∫–∞–∂–∏ –µ–µ –Ω–æ–º–µ—Ä')
            try:
                markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
                back = types.KeyboardButton('–ù–∞–∑–∞–¥ –∫ –Ω–∞—É—à–Ω–∏–∫–∞–ºüîô')
                order = types.KeyboardButton('–ó–∞–∫–∞–∑–∞—Ç—åüòä')
                markup.add(back, order)
                model = get_model('watch', int(message.text), my_tuple[1])
                photos = model[1][0][-1].split(' ')
                photo1 = photos[0]
                photo2 = photos[1]
                media = [InputMediaPhoto(open(f'./{photo1}', 'rb'), caption=f'{model[0]}'),
                         InputMediaPhoto(open(f'./{photo2}', 'rb'))]
                bot.send_media_group(chat_id, media)
                bot.send_message(chat_id, text='–ó–∞–∏–Ω—Ç–µ—Ä–µ—Å–æ–≤–∞–ª–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ? –ñ–º–∏ "–∑–∞–∫–∞–∑–∞—Ç—å"üëáüèª', reply_markup=markup,
                                 disable_notification=True)
                user_state[chat_id] = states['earphones_model_selected']
                selected_models[chat_id] = {model[1][0][1]: model[1][0]}
            except Exception as ex:
                bot.send_message(chat_id, "–ü–æ—Ö–æ–∂–µ –≤—ã –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ –≤–≤–µ–ª–∏ –Ω–æ–º–µ—Ä –º–æ–¥–µ–ª–∏, —Ç—Ä–µ–±—É–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –Ω–æ–º–µ—Ä")
                print(ex)


        elif user_state[chat_id] == states['earphones_model_selected']:
            if message.text == '–ù–∞–∑–∞–¥ –∫ –Ω–∞—É—à–Ω–∏–∫–∞–ºüîô':
                my_tuple = zapros('watch', '–û—Ç–ª–∏—á–Ω–æ!\n–í–æ—Ç —Å–ø–∏—Å–æ–∫ –∏–º–µ—é—â–∏—Ö—Å—è –≤ –Ω–∞–ª–∏—á–∏–∏ –Ω–∞—É—à–Ω–∏–∫–æ–≤:\n\n',
                                  '–ö –Ω–∞—É—à–Ω–∏–∫–∞–º –¥–∞—Ä–∏–º –∑–∞—â–∏—Ç–Ω—ã–π —á–µ—Ö–æ–ª!üéÅ\n–ó–∞–∏–Ω—Ç–µ—Ä–µ—Å–æ–≤–∞–ª–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–∞—è –º–æ–¥–µ–ª—å? –£–∫–∞–∂–∏ –µ–µ –Ω–æ–º–µ—Ä')
                markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
                back = types.KeyboardButton('–ù–∞–∑–∞–¥üîô')
                markup.add(back)
                bot.send_message(chat_id, my_tuple[0], reply_markup=markup)
                user_state[chat_id] = states['earphones_selected']
                if not add_model:
                    del selected_models[chat_id]
            elif message.text == '–ó–∞–∫–∞–∑–∞—Ç—åüòä':
                markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
                still_order = types.KeyboardButton('–û—Å—Ç–∞–≤–∏—Ç—å –≤—ã–±—Ä–∞–Ω–Ω–æ–µ')
                sale = types.KeyboardButton('–ê–∫—Ü–∏—è')
                markup.add(sale, still_order)
                bot.send_message(chat_id, '–¢–∞–∫–∂–µ –º—ã –ø–æ–¥–≥–æ—Ç–æ–≤–∏–ª–∏ 2 –°–ü–ï–¶–ü–†–ï–î–õ–û–ñ–ï–ù–ò–Ø –Ω–∞ –∫–æ–º–ø–ª–µ–∫—Ç—ã 1+1 üî•\n\n1Ô∏è‚É£–ß–∞—Å—ã + '
                                          '–Ω–∞—É—à–Ω–∏–∫–∏ –±—É–¥—É—Ç –ø–æ –°–ü–ï–¶–ò–ê–õ–¨–ù–û–ô —Ü–µ–Ω–µ Air pods pro2(—Å —à—É–º–∫–æ–π) + –ß–∞—Å—ã HK9PRO('
                                          'watch8 45mm) - 250 —Ä—É–±–ª–µ–π\n Air pods pro2(—Å —à—É–º–∫–æ–π) + –ß–∞—Å—ã HK8PRO MAX(watch '
                                          'ultra 49mm) - 260 —Ä—É–±–ª–µ–π\n Air pods 3 + –ß–∞—Å—ã HK9PRO(watch8 45mm) - 230 '
                                          '—Ä—É–±–ª–µ–π\n Air pods 3 + –ß–∞—Å—ã HK8PRO MAX(watch ultra 49mm) - 240 —Ä—É–±–ª–µ–π\n\n '
                                          '2Ô∏è‚É£–ß–∞—Å—ã + —á–∞—Å—ã –ø–æ –°–ü–ï–¶–ò–ê–õ–¨–ù–û–ô —Ü–µ–Ω–µ\n HK9PRO(watch8 45mm) + –ß–∞—Å—ã HK8PRO MAX('
                                          'watch ultra 49mm)- 280 —Ä—É–±–ª–µ–π', reply_markup=markup)
                user_state[chat_id] = states['order']



#
#          –ê–ö–°–ï–°–°–£–ê–†–´ !!!
#

        elif user_state[chat_id] == states['attachment_selected']:
            my_tuple = zapros('attachment', '–û—Ç–ª–∏—á–Ω–æ!\n–í–æ—Ç —Å–ø–∏—Å–æ–∫ –∏–º–µ—é—â–∏—Ö—Å—è –≤ –Ω–∞–ª–∏—á–∏–∏ –∞–∫—Å–µ—Å—Å—É–∞—Ä–æ–≤:\n\n',
                              '–ó–∞–∏–Ω—Ç–µ—Ä–µ—Å–æ–≤–∞–ª–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–∞—è –º–æ–¥–µ–ª—å? '
                              '–£–∫–∞–∂–∏ –µ–µ –Ω–æ–º–µ—Ä')
            try:
                markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
                back = types.KeyboardButton('–ù–∞–∑–∞–¥ –∫ –∞–∫—Å–µ—Å—Å—É–∞—Ä–∞–ºüîô')
                order = types.KeyboardButton('–ó–∞–∫–∞–∑–∞—Ç—åüòä')
                markup.add(back, order)
                model = get_model('attachment', int(message.text), my_tuple[1])
                photos = model[1][0][-1].split(' ')
                if len(photos) == 1:
                    photo1 = photos[0]
                    media = [InputMediaPhoto(open(f'./{photo1}', 'rb'), caption=f'{model[0]}')]
                    bot.send_media_group(chat_id, media)
                    bot.send_message(chat_id, text='–ó–∞–∏–Ω—Ç–µ—Ä–µ—Å–æ–≤–∞–ª–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ? –ñ–º–∏ "–∑–∞–∫–∞–∑–∞—Ç—å"üëáüèª', reply_markup=markup,
                                     disable_notification=True)
                else:
                    photo1 = photos[0]
                    photo2 = photos[1]
                    media = [InputMediaPhoto(open(f'./{photo1}', 'rb'), caption=f'{model[0]}'),
                             InputMediaPhoto(open(f'./{photo2}', 'rb'))]
                    bot.send_media_group(chat_id, media)
                    bot.send_message(chat_id, text='–ó–∞–∏–Ω—Ç–µ—Ä–µ—Å–æ–≤–∞–ª–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ? –ñ–º–∏ "–∑–∞–∫–∞–∑–∞—Ç—å"üëáüèª', reply_markup=markup,
                                     disable_notification=True)
                user_state[chat_id] = states['attachment_model_selected']
                selected_models[chat_id] = {model[1][0][1]: model[1][0]}
            except Exception:
                bot.send_message(chat_id, "–ü–æ—Ö–æ–∂–µ –≤—ã –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ –≤–≤–µ–ª–∏ –Ω–æ–º–µ—Ä, —Ç—Ä–µ–±—É–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –Ω–æ–º–µ—Ä")


        elif user_state[chat_id] == states['attachment_model_selected']:
            if message.text == '–ù–∞–∑–∞–¥ –∫ –∞–∫—Å–µ—Å—Å—É–∞—Ä–∞–ºüîô':
                my_tuple = zapros('attachment', '–û—Ç–ª–∏—á–Ω–æ!\n–í–æ—Ç —Å–ø–∏—Å–æ–∫ –∏–º–µ—é—â–∏—Ö—Å—è –≤ –Ω–∞–ª–∏—á–∏–∏ –∞–∫—Å–µ—Å—Å—É–∞—Ä–æ–≤:\n\n',
                                  '–ó–∞–∏–Ω—Ç–µ—Ä–µ—Å–æ–≤–∞–ª–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–∞—è –º–æ–¥–µ–ª—å? '
                                  '–£–∫–∞–∂–∏ –µ–µ –Ω–æ–º–µ—Ä')
                markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
                back = types.KeyboardButton('–ù–∞–∑–∞–¥üîô')
                markup.add(back)
                bot.send_message(chat_id, my_tuple[0], reply_markup=markup)
                user_state[chat_id] = states['attachment_selected']
                if not add_model:
                    del selected_models[chat_id]
            elif message.text == '–ó–∞–∫–∞–∑–∞—Ç—åüòä':
                markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
                still_order = types.KeyboardButton('–û—Å—Ç–∞–≤–∏—Ç—å –≤—ã–±—Ä–∞–Ω–Ω–æ–µ')
                sale = types.KeyboardButton('–ê–∫—Ü–∏—è')
                markup.add(sale, still_order)
                bot.send_message(chat_id, '–¢–∞–∫–∂–µ –º—ã –ø–æ–¥–≥–æ—Ç–æ–≤–∏–ª–∏ 2 –°–ü–ï–¶–ü–†–ï–î–õ–û–ñ–ï–ù–ò–Ø –Ω–∞ –∫–æ–º–ø–ª–µ–∫—Ç—ã 1+1 üî•\n\n1Ô∏è‚É£–ß–∞—Å—ã + '
                                          '–Ω–∞—É—à–Ω–∏–∫–∏ –±—É–¥—É—Ç –ø–æ –°–ü–ï–¶–ò–ê–õ–¨–ù–û–ô —Ü–µ–Ω–µ Air pods pro2(—Å —à—É–º–∫–æ–π) + –ß–∞—Å—ã HK9PRO('
                                          'watch8 45mm) - 250 —Ä—É–±–ª–µ–π\n Air pods pro2(—Å —à—É–º–∫–æ–π) + –ß–∞—Å—ã HK8PRO MAX(watch '
                                          'ultra 49mm) - 260 —Ä—É–±–ª–µ–π\n Air pods 3 + –ß–∞—Å—ã HK9PRO(watch8 45mm) - 230 '
                                          '—Ä—É–±–ª–µ–π\n Air pods 3 + –ß–∞—Å—ã HK8PRO MAX(watch ultra 49mm) - 240 —Ä—É–±–ª–µ–π\n\n '
                                          '2Ô∏è‚É£–ß–∞—Å—ã + —á–∞—Å—ã –ø–æ –°–ü–ï–¶–ò–ê–õ–¨–ù–û–ô —Ü–µ–Ω–µ\n HK9PRO(watch8 45mm) + –ß–∞—Å—ã HK8PRO MAX('
                                          'watch ultra 49mm)- 280 —Ä—É–±–ª–µ–π', reply_markup=markup)
                user_state[chat_id] = states['order']


#
#          –ó–ê–ö–ê–ó
#

        elif user_state[chat_id] == states['order']:
            if message.text == '–û—Å—Ç–∞–≤–∏—Ç—å –≤—ã–±—Ä–∞–Ω–Ω–æ–µ':
                markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
                prim = types.KeyboardButton('–ü—Ä–∏–º–µ—Ä –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è')
                markup.add(prim)
                bot.send_message(chat_id, '1) –µ–≤—Ä–æ–ø–æ—á—Ç–∞/–∫—É—Ä—å–µ—Ä \n2) –∏–º—è —Ñ–∞–º–∏–ª–∏—è \n3)–Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ \n4) –ì–æ—Ä–æ–¥ '
                                          '–ø—Ä–æ–∂–∏–≤–∞–Ω–∏—è\n5) –æ—Ç–¥–µ–ª–µ–Ω–∏–µ '
                                          '–µ–≤—Ä–æ–ø–æ—á—Ç—ã/–∞–¥—Ä–µ—Å –ø—Ä–æ–∂–∏–≤–∞–Ω–∏—è', reply_markup=markup)
                user_state[chat_id] = states['sending_order']
            elif message.text == '–ê–∫—Ü–∏—è':
                info = get_sell()
                markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
                back = types.KeyboardButton('–û—Å—Ç–∞–≤–∏—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Ç–æ–≤–∞—Ä')
                markup.add(back)
                bot.send_message(chat_id, f'–ü—Ä–µ–∫—Ä–∞—Å–Ω–æ, —É–∫–∞–∂–∏—Ç–µ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –Ω–æ–º–µ—Ä –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–µ–π –ø–æ–∑–∏—Ü–∏–∏\n{info}',
                                 reply_markup=markup)
                user_state[chat_id] = states['chose_sell']

        elif user_state[chat_id] == states['sending_order']:
            if message.text == '–ü—Ä–∏–º–µ—Ä –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è':
                bot.send_message(chat_id, '–ï–≤—Ä–æ–ø–æ—á—Ç–∞/–î–æ—Å—Ç–∞–≤–∫–∞\n–ò–≤–∞–Ω–æ–≤ –ò–≤–∞–Ω\n+375 (33) 333-33-33\n–≥.–ú–∏–Ω—Å–∫\n –û—Ç–¥–µ–ª–µ–Ω–∏–µ '
                                          '‚Ññ1/—É–ª.–ú–æ–ª–æ–¥–µ–∂–Ω–∞—è –¥.1 –∫–≤.1')
            elif message.text == '–ù–∞–∑–∞–¥ –∫ –∞–∫—Ü–∏–∏':
                info = get_sell()
                markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
                still = types.KeyboardButton('–û—Å—Ç–∞–≤–∏—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Ç–æ–≤–∞—Ä')
                markup.add(still)
                bot.send_message(chat_id, f'–ü—Ä–µ–∫—Ä–∞—Å–Ω–æ, —É–∫–∞–∂–∏—Ç–µ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –Ω–æ–º–µ—Ä –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–µ–π –ø–æ–∑–∏—Ü–∏–∏\n{info}',
                                 reply_markup=markup)
                user_state[chat_id] = states['chose_sell']
            else:
                try:
                    txt = message.text
                    data = txt.split('\n')
                    exception_list = ''
                    if len(data) != 5:
                        raise Exception('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö. –£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ –≤—ã –≤–≤–µ–ª–∏ –≤—Å—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏ –Ω–∏—á–µ–≥–æ –ª–∏—à–Ω–µ–≥–æ')

                    #–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—ã–±–æ—Ä–∞ –¥–æ—Å—Ç–∞–≤–∫–∏
                    for i in data[0]:
                        if i not in alphabet and i not in alphabet.upper():
                            if '‚ùå –í –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–æ–∫–µ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã\n\n' in exception_list:
                                break
                            exception_list += '‚ùå –í –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–æ–∫–µ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã\n\n'

                    #–ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–º–µ–Ω–∏ –∏ —Ñ–∞–º–∏–ª–∏–∏
                    name = data[1].split(' ')
                    for i in name:
                        for j in i:
                            if j not in alphabet and j not in alphabet.upper():
                                if '‚ùå –í —Å—Ç—Ä–æ–∫–µ –∏–º–µ–Ω–∏ –∏ —Ñ–∞–º–∏–ª–∏–∏ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —Ç–æ–ª—å–∫–æ –∏–º—è –∏ —Ñ–∞–º–∏–ª–∏—è –±–µ–∑ ' \
                                                  '–¥—Ä—É–≥–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤\n\n' in exception_list:
                                    break
                                exception_list += '‚ùå –í —Å—Ç—Ä–æ–∫–µ –∏–º–µ–Ω–∏ –∏ —Ñ–∞–º–∏–ª–∏–∏ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —Ç–æ–ª—å–∫–æ –∏–º—è –∏ —Ñ–∞–º–∏–ª–∏—è –±–µ–∑ ' \
                                                  '–¥—Ä—É–≥–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤\n\n'

                    #–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
                    for i in data[2]:
                        if not i.isdigit() and i != ' ' and i != '-' and i != '+' and i != '(' and i != ')':
                            if '‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –≤–≤–æ–¥ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞. –°–º–æ—Ä–∏—Ç–µ –ø—Ä–∏–º–µ—Ä –≤–≤–æ–¥–∞ –¥–∞–Ω–Ω—ã—Ö\n\n' in exception_list:
                                break
                            exception_list += '‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –≤–≤–æ–¥ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞. –°–º–æ—Ä–∏—Ç–µ –ø—Ä–∏–º–µ—Ä –≤–≤–æ–¥–∞ –¥–∞–Ω–Ω—ã—Ö\n\n'

                    #–ü—Ä–æ–≤–µ—Ä–∫–∞ –≥–æ—Ä–æ–¥–∞
                    for i in data[3]:
                        if i not in alphabet and i != '.':
                            if '‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –≤–≤–æ–¥ –≥–æ—Ä–æ–¥–∞' in exception_list:
                                break
                            exception_list += '‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –≤–≤–æ–¥ –≥–æ—Ä–æ–¥–∞'


                    if len(exception_list) > 0:
                        raise Exception(exception_list)
                    price = 0
                    model_list = []
                    if 'sell' in selected_models[chat_id].keys():
                        models = selected_models[chat_id]['sell'][0]
                        price = selected_models[chat_id]['sell'][1]
                    else:
                        for i in selected_models[chat_id].values():
                            price += i[3]
                            model_list.append(i[1])
                        models = ''
                        for i in model_list:
                            models += i
                            models += ' '
                    info = add_order(data, models, price)
                    maxim_message = '–ù–æ–≤—ã–π –∑–∞–∫–∞–∑ –ø—Ä–∏—à–µ–ª, –∑–∞–π–∫–∞\n'
                    count = 0
                    for i in info:
                        if count < len(message_order_list) - 1:
                            mes = message_order_list[count] + str(i) + '\n'
                            maxim_message += mes
                            count += 1
                        else:
                            maxim_message += str(i)
                            maxim_message += '\n'
                    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
                    start = types.KeyboardButton('–ù–∞—á–∞—Ç—å —Å –Ω–∞—á–∞–ª–∞')
                    markup.add(start)
                    bot.send_message(349264741, maxim_message + message_order_list[-1] + message.from_user.username)
                    bot.send_message(chat_id, '–ë–æ–ª—å—à–æ–µ —Å–ø–∞—Å–∏–±–æ –∑–∞ –∑–∞–∫–∞–∑\n–í —Å–∫–æ—Ä–æ–º –≤—Ä–µ–º–µ–Ω–∏ —Å –≤–∞–º–∏ —Å–≤—è–∂—É—Ç—Å—è –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è '
                                              '–∑–∞–∫–∞–∑–∞', reply_markup=markup)
                    user_state[chat_id] = states['start']
                except Exception as ex:
                    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
                    prim = types.KeyboardButton('–ü—Ä–∏–º–µ—Ä –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è')
                    markup.add(prim)
                    bot.send_message(chat_id, str(ex), reply_markup=markup)


#
#     –ê–ö–¶–ò–Ø
#

        elif user_state[chat_id] == states['chose_sell']:
            if message.text == '–û—Å—Ç–∞–≤–∏—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Ç–æ–≤–∞—Ä':
                markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
                prim = types.KeyboardButton('–ü—Ä–∏–º–µ—Ä –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è')
                back = types.KeyboardButton('–ù–∞–∑–∞–¥ –∫ –∞–∫—Ü–∏–∏')
                markup.add(back, prim)
                bot.send_message(chat_id, '1) –µ–≤—Ä–æ–ø–æ—á—Ç–∞/–∫—É—Ä—å–µ—Ä \n2) –∏–º—è —Ñ–∞–º–∏–ª–∏—è \n3)–Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ \n4) –ì–æ—Ä–æ–¥ '
                                          '–ø—Ä–æ–∂–∏–≤–∞–Ω–∏—è\n5) –æ—Ç–¥–µ–ª–µ–Ω–∏–µ '
                                          '–µ–≤—Ä–æ–ø–æ—á—Ç—ã/–∞–¥—Ä–µ—Å –ø—Ä–æ–∂–∏–≤–∞–Ω–∏—è\n–ï–±–ª–∞–Ω, –ø–∏—à–∏ –¥–∞–Ω–Ω—ã–µ –≤ —Å—Ç–æ–ª–±–∏–∫ –∫–∞–∫ –≤ –ø—Ä–∏–º–µ—Ä–µ –∏–ª–∏ —Ç—ã –≤–æ–æ–±—â–µ –∞—É—Ç–∏—Å—Ç –±–µ–∑–¥–∞—Ä–Ω—ã–π –∏ –ø–æ –ø—Ä–∏–º–µ—Ä—É –µ–±–∞–Ω–æ–º—É –Ω–µ–ø–æ–Ω—è—Ç–Ω–æ',reply_markup=markup)
                if 'sell' in selected_models[chat_id].keys():
                    del selected_models[chat_id]['sell']
                user_state[chat_id] = states['sending_order']
            else:
                try:
                    if message.text in sell_offers.keys():
                        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
                        back = types.KeyboardButton('–ù–∞–∑–∞–¥')
                        order = types.KeyboardButton('–ó–∞–∫–∞–∑–∞—Ç—å')
                        markup.add(back, order)
                        bot.send_message(chat_id, f'–í—ã –≤—ã–±—Ä–∞–ª–∏ –ø–∞—Ä—É {sell_offers[message.text][0]} –∑–∞ '
                                                  f'{sell_offers[message.text][1]} —Ä—É–±–ª–µ–π\n–ß—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å '
                                                  f'–ø–æ–¥—Ä–æ–±–Ω–µ–µ '
                                                  f'–æ–± –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–π –º–æ–¥–µ–ª–∏ —É–∫–∞–∂–∏—Ç–µ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –ø–æ–ª–Ω–æ—Å—Ç—å—é –º–æ–¥–µ–ª—å',
                                         reply_markup=markup)
                        selected_models[chat_id]['sell'] = [sell_offers[message.text][0], sell_offers[message.text][
                            1], sell_offers[message.text][2], sell_offers[message.text][3]]
                        user_state[chat_id] = states['show_sell_model']
                    else:
                        bot.send_message(chat_id, '–ü–æ—Ö–æ–∂–µ –≤—ã –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ –≤–≤–µ–ª–∏ –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –≤ —Å–ø–∏—Å–∫–µ –Ω–æ–º–µ—Ä')
                except Exception:
                    bot.send_message(chat_id, '–ü–æ—Ö–æ–∂–µ –≤—ã –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ –≤–≤–µ–ª–∏ –Ω–æ–º–µ—Ä, —Ç—Ä–µ–±—É–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –Ω–æ–º–µ—Ä')

        elif user_state[chat_id] == states['show_sell_model']:
            if message.text == '–ó–∞–∫–∞–∑–∞—Ç—å':
                markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
                prim = types.KeyboardButton('–ü—Ä–∏–º–µ—Ä –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è')
                markup.add(prim)
                bot.send_message(chat_id, '1) –µ–≤—Ä–æ–ø–æ—á—Ç–∞/–∫—É—Ä—å–µ—Ä \n2) –∏–º—è —Ñ–∞–º–∏–ª–∏—è \n3)–Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ \n4) –ì–æ—Ä–æ–¥ '
                                          '–ø—Ä–æ–∂–∏–≤–∞–Ω–∏—è\n5) –æ—Ç–¥–µ–ª–µ–Ω–∏–µ '
                                          '–µ–≤—Ä–æ–ø–æ—á—Ç—ã/–∞–¥—Ä–µ—Å –ø—Ä–æ–∂–∏–≤–∞–Ω–∏—è',
                                 reply_markup=markup)
                user_state[chat_id] = states['sending_order']
            elif message.text == '–ù–∞–∑–∞–¥':
                info = get_sell()
                markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
                prev = types.KeyboardButton('–û—Å—Ç–∞–≤–∏—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Ç–æ–≤–∞—Ä')
                markup.add(prev)
                bot.send_message(chat_id, f'–ü—Ä–µ–∫—Ä–∞—Å–Ω–æ, —É–∫–∞–∂–∏—Ç–µ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –Ω–æ–º–µ—Ä –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–µ–π –ø–æ–∑–∏—Ü–∏–∏\n{info}',
                                 reply_markup=markup)
                if 'sell' in selected_models[chat_id].keys():
                    del selected_models[chat_id]['sell']
                user_state[chat_id] = states['chose_sell']
            else:
                try:
                    names = selected_models[chat_id]['sell'][0].split('+')
                    if message.text == names[0][:-1]:
                        table = selected_models[chat_id]['sell'][2]
                    else:
                        table = selected_models[chat_id]['sell'][3]
                    info = get_sale_model(table, message.text)
                    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
                    back = types.KeyboardButton('–ù–∞–∑–∞–¥ –∫ –ø–∞—Ä–µ')
                    markup.add(back)
                    photos = info[1].split(' ')
                    photo1 = photos[0]
                    photo2 = photos[1]
                    media = [InputMediaPhoto(open(f'./{photo1}', 'rb'), caption=f'{info[0]}'),
                             InputMediaPhoto(open(f'./{photo2}', 'rb'))]
                    bot.send_media_group(chat_id, media)
                    bot.send_message(chat_id, text='üîé',
                                     reply_markup=markup,
                                     disable_notification=True)
                    user_state[chat_id] = states['full_sell_model_info']
                except Exception as ex:
                    bot.send_message(chat_id, '–¢—Ä–µ–±—É–µ—Ç—Å—è –≤–≤–µ—Å—Ç–∏ –ø–æ–ª–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏')
                    print(ex)

        elif user_state[chat_id] == states['full_sell_model_info']:
            if message.text == '–ù–∞–∑–∞–¥ –∫ –ø–∞—Ä–µ':
                markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
                back = types.KeyboardButton('–ù–∞–∑–∞–¥')
                order = types.KeyboardButton('–ó–∞–∫–∞–∑–∞—Ç—å')
                markup.add(back, order)
                sell = 'sell'
                bot.send_message(chat_id, f'–í—ã –≤—ã–±—Ä–∞–ª–∏ –ø–∞—Ä—É {selected_models[chat_id][sell][0]} –∑–∞ '
                                          f'{selected_models[chat_id][sell][1]} —Ä—É–±–ª–µ–π\n–ß—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å '
                                          f'–ø–æ–¥—Ä–æ–±–Ω–µ–µ '
                                          f'–æ–± –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–π –º–æ–¥–µ–ª–∏ —É–∫–∞–∂–∏—Ç–µ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –ø–æ–ª–Ω–æ—Å—Ç—å—é –º–æ–¥–µ–ª—å',
                                 reply_markup=markup)
                user_state[chat_id] = states['show_sell_model']


    except Exception:
        bot.send_message(chat_id, '–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é –≤–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞\n–î–ª—è –≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã –≤–≤–µ–¥–∏—Ç–µ /start')


bot.polling(none_stop=True)